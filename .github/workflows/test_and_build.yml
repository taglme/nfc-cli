on: [push, pull_request]
name: test and build
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v1
      with:
        go-version: 1.14.x
    - name: Checkout code
      uses: actions/checkout@v1
    - name: Install golangci-lint
      run: |
        go get github.com/golangci/golangci-lint/cmd/golangci-lint
    - name: Run linters
      run: |
        export PATH=$PATH:$(go env GOPATH)/bin   
        golangci-lint run ./...
  test:
    strategy:
      matrix:
        go-version: [1.14.x]
        platform: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    steps:
    - name: Install Go
      if: success()
      uses: actions/setup-go@v1
      with:
        go-version: ${{ matrix.go-version }}
    - name: Checkout code
      uses: actions/checkout@v1
    - name: Run tests
      run: |
        go test -v -count=1 -cover ./...

  coverage:
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      if: success()
      uses: actions/setup-go@v1
      with:
        go-version: 1.14.x
    - name: Checkout code
      uses: actions/checkout@v1
    - name: Calc coverage 
      run: |
        go test -v -covermode=count -coverprofile=coverage.txt ./...
    - name: Codecov
      uses: codecov/codecov-action@v1
      with:
        file: ./coverage.txt
  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - name: Install Go
      uses: actions/setup-go@v1
      with:
        go-version: 1.14.x
    - name: Checkout code
      uses: actions/checkout@v1
    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v1
      with:
        version: latest
        args: release --snapshot --skip-publish --rm-dist
      env:
        SDK_INFO: ${{ secrets.SDK_INFO }}
        APP_ID: ${{ secrets.APP_ID }}
        CERT: ${{ secrets.CERT }}
        SECRET: ${{ secrets.SECRET }}
